version: "3"

includes:
  api-golang:
    taskfile: ./api-golang/Taskfile.yaml
    dir: ./api-golang
  client:
    taskfile: ./client/Taskfile.yaml
    dir: ./client
  load-generator:
    taskfile: ./load-generator/Taskfile.yaml
    dir: ./load-generator
  postgresql:
    taskfile: ./postgresql/Taskfile.yaml
    dir: ./postgresql

vars:
  DATABASE_URL: "postgres://postgres:foobarbaz@localhost:5432/postgres"
  API_URL: http://api-golang.src_load_tester:8000

tasks:

##############################################################################
## BUILD

  bootstrap-buildx-builder:
    desc: "Bootstrap the builder"
    cmds:
      - docker buildx create --name mybuilder --driver docker-container --driver-opt network=host --use
      - docker buildx inspect mybuilder --bootstrap
      - docker buildx use mybuilder

  run-local-registry:
    desc: "Run a local registry"
    cmds:
      - docker run -d -p 5000:5000 registry:2.8

  build:
    desc: "Build/push docker images with buildx (mutli-architecture)"
    cmds:
    - task: api-golang:build
    - task: client:build
    - task: postgresql:build
    - task: postgresql:build-migration
    - task: load-generator:build

##############################################################################
## RUN

  start:
    desc: "Start all services with Docker Compose"
    cmds:
      - docker compose up -d
      - task: run-psql-init-script

  run-psql-init-script:
    desc: "Add tables to database"
    cmds:
      - |
        CONTAINER_ID=$(docker ps -q --filter "name=postgresql")
        docker cp ./postgresql/init/create_users.sql $CONTAINER_ID:/tmp/create_users.sql
        docker exec $CONTAINER_ID psql -U "postgres" -f /tmp/create_users.sql

##############################################################################
## LOAD TEST

  load-test:
    desc: "Run the load test"
    cmds:
      - env API_URL=$API_URL docker run --rm --network src_load_tester -e API_URL=$API_URL superelectron/kubernetes-load-generator python main.py
    env:
        API_URL: "{{.API_URL}}"

##############################################################################
## STOP

  stop:
    desc: "Stop and remove all containers"
    cmds:
      - docker compose down

##############################################################################
## CLEAN UP

  clean_buildx:
    desc: "Remove buildx docker container, image, and volume"
    cmds:
      - |
        CONTAINER_ID=$(docker ps -q --filter 'name=mybuilder')
        VOLUME_NAME=$(docker volume ls --filter 'name=mybuilder' -q)
        docker container kill ${CONTAINER_ID} && docker container rm ${CONTAINER_ID} | echo 'ok' 
        docker volume rm ${VOLUME_NAME} | echo 'ok'

  prune_buildx:
    desc: "Remove all build cache from docker buildx"
    cmds:
      - docker builder prune --verbose

  clean_volumes:
    desc: "Remove volumes from the project"
    cmds:
      - |
        VOLUME_NAME=$(docker volume ls --filter 'name=pgdata' -q)
        docker volume rm ${VOLUME_NAME} | echo 'ok'

  clean_images:
    desc: "Remove all images that are not being used by a container"
    cmds:
      - docker image prune -a

  clean:
    desc: "Clean up all project resources"
    cmds:
      - task: stop
      - task: clean_volumes
      - task: clean_buildx

  clean_deep:
    desc: "Clean up all project resources (may affect others on your system)"
    cmds:
      - task: stop
      - task: clean
      - task: clean_images
      - task: prune_buildx
